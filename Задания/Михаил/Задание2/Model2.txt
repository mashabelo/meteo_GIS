from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterFeatureSource
from qgis.core import QgsProcessingParameterFeatureSink
from qgis.core import QgsProcessingParameterRasterDestination
import processing


class (QgsProcessingAlgorithm):

    def initAlgorithm(self, config=None):
        self.addParameter(QgsProcessingParameterFeatureSource('meteostations', 'Meteostations', types=[QgsProcessing.TypeVectorPoint], defaultValue=None))
        self.addParameter(QgsProcessingParameterFeatureSource('regions', 'Regions', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        self.addParameter(QgsProcessingParameterFeatureSink('ChoiceOfMeteostationsForNwfr', 'Choice of meteostations for NWFR', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, defaultValue=None))
        self.addParameter(QgsProcessingParameterFeatureSink('UnitingInOneRegion', 'Uniting in one region', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, defaultValue=None))
        self.addParameter(QgsProcessingParameterFeatureSink('ChoiceOfRegion', 'Choice of region', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, defaultValue=None))
        self.addParameter(QgsProcessingParameterFeatureSink('Overprojekted_layerZone38n', 'Overprojekted_layer (Zone 38N)', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, defaultValue=None))
        self.addParameter(QgsProcessingParameterRasterDestination('', '123', createByDefault=True, defaultValue=None))

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(5, model_feedback)
        results = {}
        outputs = {}

        # Извлечь по выражению
        alg_params = {
            'EXPRESSION': '\"ADM3_NAME\" = \'Северо-Западный федеральный округ\'',
            'INPUT': parameters['regions'],
            'OUTPUT': parameters['ChoiceOfRegion']
        }
        outputs[''] = processing.run('native:extractbyexpression', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['ChoiceOfRegion'] = outputs['']['OUTPUT']

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # Объединение по признаку
        alg_params = {
            'FIELD': 'ADM3_NAME',
            'INPUT': outputs['']['OUTPUT'],
            'OUTPUT': parameters['UnitingInOneRegion']
        }
        outputs[''] = processing.run('native:dissolve', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['UnitingInOneRegion'] = outputs['']['OUTPUT']

        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # Обрезать
        alg_params = {
            'INPUT': parameters['meteostations'],
            'OVERLAY': outputs['']['OUTPUT'],
            'OUTPUT': parameters['ChoiceOfMeteostationsForNwfr']
        }
        outputs[''] = processing.run('native:clip', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['ChoiceOfMeteostationsForNwfr'] = outputs['']['OUTPUT']

        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}

        # Перепроектировать слой
        alg_params = {
            'INPUT': outputs['']['OUTPUT'],
            'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:32238'),
            'OUTPUT': parameters['Overprojekted_layerZone38n']
        }
        outputs[''] = processing.run('native:reprojectlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['Overprojekted_layerZone38n'] = outputs['']['OUTPUT']

        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}

        # Heatmap (Kernel Density Estimation)
        alg_params = {
            'DECAY': 0,
            'INPUT': outputs['']['OUTPUT'],
            'KERNEL': 0,
            'OUTPUT_VALUE': 0,
            'PIXEL_SIZE': 13000.1,
            'RADIUS': 10000,
            'RADIUS_FIELD': None,
            'WEIGHT_FIELD': None,
            'OUTPUT': parameters['']
        }
        outputs['HeatmapKernelDensityEstimation'] = processing.run('qgis:heatmapkerneldensityestimation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results[''] = outputs['HeatmapKernelDensityEstimation']['OUTPUT']
        return results

    def name(self):
        return 'модель'

    def displayName(self):
        return 'модель'

    def group(self):
        return ''

    def groupId(self):
        return ''

    def createInstance(self):
        return ()
